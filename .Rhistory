runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Downloads/lab7-solutions/lab7-final.r')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Downloads/lab7-solutions/lab7-final.r')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
library(shiny); runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
runApp('Desktop/IV ASMT2/Assignment 2.R')
# Install required packages if not installed
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
if (!requireNamespace("leaflet", quietly = TRUE)) {
install.packages("leaflet")
}
if (!requireNamespace("geojsonio", quietly = TRUE)) {
install.packages("geojsonio")
}
library(shiny)
library(leaflet)
library(geojsonio)
# Your GeoJSON data
geoJsonString <- '{
"type": "FeatureCollection",
"features": [
{
"type": "Feature",
"properties": {
"OBJECTID": 379411,
"ROAD_NUMBER": "5439",
"ROAD_NAME": "BARRY RD",
"DIRECTION": "F",
"ELEMENTS": "L1+L2+L3+LT2+LT1R+RT1R",
"SURFACE_TYPE": "Asphalt",
"NUMBER_OF_TRAFFIC_LANES": 3,
"LEFT_SHOULDER_WIDTH": 0,
"TRAFFIC_WIDTH": 10.19999981,
"RIGHT_SHOULDER_WIDTH": 0,
"SEAL_WIDTH": 10.19999981,
"_id_": 0
},
"geometry": {
"type": "LineString",
"coordinates": [
[144.922601237832, -37.6638380825651],
[144.922989452405, -37.6638929297478],
[144.923036588209, -37.6638982537655]
]
}
},
// Add more features as needed
]
}'
# Convert GeoJSON string to GeoJSON object
geoJson <- geojsonio::geojson_json(geoJsonString, parse = TRUE)
leaflet() %>%
addTiles() %>%
addGeoJSON(data = geoJson)
shinyApp(ui, server)
# Run the Shiny app
shinyApp(ui, server)
# Install required packages if not installed
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
if (!requireNamespace("leaflet", quietly = TRUE)) {
install.packages("leaflet")
}
if (!requireNamespace("geojsonio", quietly = TRUE)) {
install.packages("geojsonio")
}
library(shiny)
library(leaflet)
library(geojsonio)
# Your GeoJSON data
geoJsonString <- '{
"type": "FeatureCollection",
"features": [
{
"type": "Feature",
"properties": {
"OBJECTID": 379411,
"ROAD_NUMBER": "5439",
"ROAD_NAME": "BARRY RD",
"DIRECTION": "F",
"ELEMENTS": "L1+L2+L3+LT2+LT1R+RT1R",
"SURFACE_TYPE": "Asphalt",
"NUMBER_OF_TRAFFIC_LANES": 3,
"LEFT_SHOULDER_WIDTH": 0,
"TRAFFIC_WIDTH": 10.19999981,
"RIGHT_SHOULDER_WIDTH": 0,
"SEAL_WIDTH": 10.19999981,
"_id_": 0
},
"geometry": {
"type": "LineString",
"coordinates": [
[144.922601237832, -37.6638380825651],
[144.922989452405, -37.6638929297478],
[144.923036588209, -37.6638982537655]
]
}
}
# Add more features as needed
]
}'
# Convert GeoJSON string to GeoJSON object
geoJson <- geojsonio::geojson_json(geoJsonString, parse = TRUE)
# Install required packages if not installed
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
if (!requireNamespace("leaflet", quietly = TRUE)) {
install.packages("leaflet")
}
library(shiny)
library(leaflet)
# Your GeoJSON data
geoJsonString <- '{
"type": "FeatureCollection",
"features": [
{
"type": "Feature",
"properties": {
"OBJECTID": 379411,
"ROAD_NUMBER": "5439",
"ROAD_NAME": "BARRY RD",
"DIRECTION": "F",
"ELEMENTS": "L1+L2+L3+LT2+LT1R+RT1R",
"SURFACE_TYPE": "Asphalt",
"NUMBER_OF_TRAFFIC_LANES": 3,
"LEFT_SHOULDER_WIDTH": 0,
"TRAFFIC_WIDTH": 10.19999981,
"RIGHT_SHOULDER_WIDTH": 0,
"SEAL_WIDTH": 10.19999981,
"_id_": 0
},
"geometry": {
"type": "LineString",
"coordinates": [
[144.922601237832, -37.6638380825651],
[144.922989452405, -37.6638929297478],
[144.923036588209, -37.6638982537655]
]
}
}
# Add more features as needed
]
}'
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
# Parse GeoJSON string
geoJson <- fromJSON(geoJsonString)
# Render the Leaflet map
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addGeoJSON(data = geoJson)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Install required packages if not installed
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
if (!requireNamespace("leaflet", quietly = TRUE)) {
install.packages("leaflet")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(shiny)
library(leaflet)
library(jsonlite)
# Your GeoJSON data
geoJsonString <- '{
"type": "FeatureCollection",
"features": [
{
"type": "Feature",
"properties": {
"OBJECTID": 379411,
"ROAD_NUMBER": "5439",
"ROAD_NAME": "BARRY RD",
"DIRECTION": "F",
"ELEMENTS": "L1+L2+L3+LT2+LT1R+RT1R",
"SURFACE_TYPE": "Asphalt",
"NUMBER_OF_TRAFFIC_LANES": 3,
"LEFT_SHOULDER_WIDTH": 0,
"TRAFFIC_WIDTH": 10.19999981,
"RIGHT_SHOULDER_WIDTH": 0,
"SEAL_WIDTH": 10.19999981,
"_id_": 0
},
"geometry": {
"type": "LineString",
"coordinates": [
[144.922601237832, -37.6638380825651],
[144.922989452405, -37.6638929297478],
[144.923036588209, -37.6638982537655]
]
}
}
# Add more features as needed
]
}'
# Define UI
ui <- fluidPage(
leafletOutput("map")
)
# Define server
server <- function(input, output, session) {
# Parse GeoJSON string
geoJson <- fromJSON(geoJsonString)
# Render the Leaflet map
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addGeoJSON(data = geoJson)
})
}
# Run the Shiny app
shinyApp(ui, server)
# Install required packages if not installed
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
if (!requireNamespace("leaflet", quietly = TRUE)) {
install.packages("leaflet")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(shiny)
library(leaflet)
library(jsonlite)
# Your GeoJSON data
geoJsonString <- {
"type": "FeatureCollection",
# ui.R
shinyUI(fluidPage(
titlePanel("Simple Shiny Scatterplot App"),
sidebarLayout(
sidebarPanel(
numericInput("n_points", "Number of Points", value = 100),
selectInput("plot_type", "Plot Type", choices = c("Scatter", "Line")),
actionButton("update", "Update Plot")
),
mainPanel(
plotOutput("scatterplot")
)
)
))
shinyServer(function(input, output) {
data <- reactive({
n <- input$n_points
x <- rnorm(n)
y <- rnorm(n)
data.frame(x = x, y = y)
})
output$scatterplot <- renderPlot({
plot_type <- input$plot_type
if (plot_type == "Scatter") {
plot(data()$x, data()$y, main = "Scatter Plot")
} else {
plot(data()$x, data()$y, main = "Line Plot", type = "l")
}
})
})
# ui.R
library(shiny)
shinyUI(fluidPage(
titlePanel("Simple Shiny Scatterplot App"),
sidebarLayout(
sidebarPanel(
numericInput("n_points", "Number of Points", value = 100),
selectInput("plot_type", "Plot Type", choices = c("Scatter", "Line")),
actionButton("update", "Update Plot")
),
mainPanel(
plotOutput("scatterplot")
)
)
))
shinyServer(function(input, output) {
data <- reactive({
n <- input$n_points
x <- rnorm(n)
y <- rnorm(n)
data.frame(x = x, y = y)
})
output$scatterplot <- renderPlot({
plot_type <- input$plot_type
if (plot_type == "Scatter") {
plot(data()$x, data()$y, main = "Scatter Plot")
} else {
plot(data()$x, data()$y, main = "Line Plot", type = "l")
}
})
})
# ui.R
library(shiny)
shinyUI(fluidPage(
titlePanel("Simple Shiny Scatterplot App"),
sidebarLayout(
sidebarPanel(
numericInput("n_points", "Number of Points", value = 100),
selectInput("plot_type", "Plot Type", choices = c("Scatter", "Line")),
actionButton("update", "Update Plot")
),
mainPanel(
plotOutput("scatterplot")
)
)
))
shinyServer(function(input, output) {
data <- reactive({
n <- input$n_points
x <- rnorm(n)
y <- rnorm(n)
data.frame(x = x, y = y)
})
output$scatterplot <- renderPlot({
plot_type <- input$plot_type
if (plot_type == "Scatter") {
plot(data()$x, data()$y, main = "Scatter Plot")
} else {
plot(data()$x, data()$y, main = "Line Plot", type = "l")
}
})
})
shinyApp(ui = source("ui.R")$value, server = source("server.R")$value)
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
library(shiny); runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/784d3d653acbe9320890163e2793f7fe/Message/MessageTemp/8f968c97a2618f6208d8b5f0d20d7121/File/IV-Group-Ass/a3.R')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/784d3d653acbe9320890163e2793f7fe/Message/MessageTemp/8f968c97a2618f6208d8b5f0d20d7121/File/IV-Group-Ass/a3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/784d3d653acbe9320890163e2793f7fe/Message/MessageTemp/8f968c97a2618f6208d8b5f0d20d7121/File/IV-Group-Ass/a3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/784d3d653acbe9320890163e2793f7fe/Message/MessageTemp/8f968c97a2618f6208d8b5f0d20d7121/File/IV-Group-Ass/a3.R')
runApp('IV ASMT3.R')
runApp('IV ASMT3.R')
library(ggplot2)
# Sample data
data <- data.frame(
category = c("A", "B", "C", "D", "E", "F"),
value = c(3, 5, 2, 8, 7, 4)
)
# Donut Chart
p_donut <- ggplot(data, aes(x = "", y = value, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2, 4), "cm") # Adjust margin to make the hole in the center bigger
) +
labs(fill = "Category")
print(p_donut)
library(shiny); runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
runApp('Documents/GitHub/IV-Final/Paul data/IV ASMT3.R')
library(shiny); runApp('Documents/GitHub/IV-Final/a3 2.R')
